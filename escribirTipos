package Semantics;
import java.io.*;
import java.util.*;
import java.util.logging.*;

public class escribirTipos {
    String part2 = "", part3 = "", part4;

    public escribirTipos(int lineas1, String bufferIn, DataInputStream in, BufferedWriter bw1, BufferedReader br) throws IOException {
        lineas1 = lineas1 - 1;
//       System.out.println(lineas1);
        List<List<String>> stringArray = new ArrayList<>(lineas1);
        for (int i = 0; i < lineas1; i++) {
            stringArray.add(new ArrayList<>());
        }

        usarsem(stringArray, bufferIn, in, bw1, br);
    }

    public void usarsem(List<List<String>> stringArray, String bufferIn, DataInputStream in, BufferedWriter fw1, BufferedReader br) throws IOException {
//   System.out.println(stringArray.toString()+""+stringArray.size());
        sem(stringArray, bufferIn, in, fw1, br);
    }

    public void sem(List<List<String>> stringArray, String bufferIn, DataInputStream in, BufferedWriter fw1, BufferedReader br) throws IOException {
        int NumeroLineas = 1;
        int nrol = 0;
        try {
            while ((bufferIn = in.readLine()) != null && br.readLine() != null) {
                int i = 0;
                String cad = bufferIn.trim();
                while (i < cad.length()) {
                    if (Character.isDigit(cad.charAt(0))) {
                        StringTokenizer st = new StringTokenizer(cad);
                        if (cad.contains(" ")) {
                            part2 = st.nextToken();
                            part3 = st.nextToken();
                            part4 = st.nextToken();

                            partir(stringArray, part2, part3, part4);
                            nrol = lineastxt(part2);
                        }
                        break;
                    } else {
                        System.err.println("Error en línea " + NumeroLineas + " se esperaba un número en el archivo CSV.");
                    }
                }
                i++;
                NumeroLineas++;
            }
            repeticion(stringArray, nrol, fw1);

        } catch (IOException ex) {
            Logger.getLogger(escribirTipos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public List<List<String>> partir(List<List<String>> stringArray, String part2, String part3, String part4) throws IOException {

        if (Integer.valueOf(part2) == 1) {
            stringArray.get(0).add(part4);
            return stringArray;
        }
        if (Integer.valueOf(part2) == 2) {
            stringArray.get(1).add(part4);
            return stringArray;
        }

        if (Integer.valueOf(part2) == 3) {
            stringArray.get(2).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 4) {
            stringArray.get(3).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 5) {
            stringArray.get(4).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 6) {
            stringArray.get(5).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 7) {
            stringArray.get(6).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 8) {
            stringArray.get(7).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 9) {
            stringArray.get(8).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 10) {
            stringArray.get(9).add(part4);

            return stringArray;
        }
        if (Integer.valueOf(part2) == 11) {
            stringArray.get(10).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 12) {
            stringArray.get(11).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 13) {
            stringArray.get(12).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 14) {
            stringArray.get(13).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 15) {
            stringArray.get(14).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 16) {
            stringArray.get(15).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 17) {
            stringArray.get(16).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 18) {
            stringArray.get(17).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 19) {
            stringArray.get(18).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 20) {
            stringArray.get(19).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 21) {
            stringArray.get(20).add(part4);

            return stringArray;
        }
        if (Integer.valueOf(part2) == 22) {
            stringArray.get(21).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 23) {
            stringArray.get(22).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 24) {
            stringArray.get(23).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 25) {
            stringArray.get(24).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 26) {
            stringArray.get(25).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 27) {
            stringArray.get(26).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 28) {
            stringArray.get(27).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 29) {
            stringArray.get(28).add(part4);

            return stringArray;

        }
        if (Integer.valueOf(part2) == 30) {
            stringArray.get(29).add(part4);

            return stringArray;

        }
        return null;
    }

    public int lineastxt(String part2) {
        int nrol = Integer.valueOf(part2);
        return nrol;
    }

    public void repeticion(List<List<String>> g, int nrol, BufferedWriter fw1) throws IOException {
        int l = g.size() - 1;

//        System.out.println(g.toString());
        for (int j = 1; j < g.size(); j++) {
            for (int k = 0; k < l; k++) {
                if (g.get(k).size() > 2 && g.get(j).size() > 1 && k != j) {
                    if (g.get(k).get(1).equals(g.get(j).get(1))) {
                        nrol = j + 1;
                        System.out.println("Error semántico en línea " + nrol);
//                        System.out.println("Misma variable: " + g.get(k).get(0) + " y " + g.get(j).get(0) + " " );
                        break;
                    }
                    if (g.get(k).get(1).equals(g.get(j).get(2))) {
                        nrol = j + 1;
                        System.out.println("Error semántico en línea: " + nrol);
//                        System.out.println("Uso de misma variable en vector: " + g.get(0).get(0) + " y " + g.get(j).get(0) + " " + g.get(j).get(1) + " " );
                        break;
                    }
                }
              }
            }
        System.out.println("Comprobación Finalizada\n");
//        Induccion ind=new Induccion(g, fw1);
    }

   

}
